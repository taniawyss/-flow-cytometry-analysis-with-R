{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Life scientists often use commercial software such as FlowJo or the OMIQ platform to analyze flow cytometry data. These tools are useful for initial and basic analysis, but do not allow for more advanced or flexible analyses, nor for the establishment of pipelines and reports. On the other hand, R is statistical software that allows for very flexible analysis, customizable pipeline creation and generation of reports.</p> <p>The \u201cAnalysis of flow cytometry data with R\u201d training that is proposed will focus on using R to analyze flow cytometry data. Flow cytometry data that can be analyzed with R includes classical multicolor flow cytometry, spectral flow cytometry, and CyTOF. This course will teach experts in flow cytometry how to run data analysis, develop pipelines and create reports using the open-source R software.</p> <p>This course is proposed by the Translational Data Science Facility of the SIB Swiss Institute of Bioinformatics in Lausanne.</p>"},{"location":"#prerequisite","title":"Prerequisite","text":"<p>Participants should already have a general knowledge of flow cytometry. The course will focus on data analysis, but a brief introduction to flow cytometry will be given. To fully benefit from this course, participants should have basic knowledge of R, such as installing packages, running commands, importing and manipulating data within R, and basic plotting functions. These prerequisites can be obtained by attending the First steps with R course organized by the SIB. Alternatively, participants can self-learn R using our Introduction to R page specifically designed for participants of the \u201cFlow Cytometry analysis with R\u201d course.</p>"},{"location":"#asking-questions","title":"Asking questions","text":"<p>During lectures, you are encouraged to ask questions using the Zoom functionality. Find the buttons in the participants list (\u2018Participants\u2019 button):</p> <p>Alternatively, (depending on your zoom version or OS) use the \u2018Reactions\u2019 button:</p>"},{"location":"flowCyt/course_schedule/","title":"Course schedule","text":"<p>We will start every day at 9 am and end at 5pm.</p> start end topic 10:30 10:50 Coffee break! 12:30 13:30 Lunch break! 15:30 15:50 Coffee break!"},{"location":"flowCyt/links/","title":"Useful links","text":"<p>Here we provide some additional links</p>"},{"location":"flowCyt/links/#a-practical-workflow-for-spectral-flow-cytometry-data-analysis-with-r","title":"A practical workflow for spectral flow cytometry data analysis with R","text":"<p>We found inspiration for this course in this publication</p> <p>den Braanker et al, 2021, Frontiers in Immunology</p>"},{"location":"flowCyt/links/#comparative-analysis-of-dimension-reduction-methods-for-cytometry-by-time-of-flight-data","title":"Comparative analysis of dimension reduction methods for cytometry by time-of-flight data","text":"<p>From the abstract:</p> <p>\u201d Here, we benchmark the performances of 21 DR methods on 110 real and 425 synthetic CyTOF samples. We find that less well-known methods like SAUCIE, SQuaD-MDS, and scvis are the overall best performers. In particular, SAUCIE and scvis are well balanced, SQuaD-MDS excels at structure preservation, whereas UMAP has great downstream analysis performance. We also find that t-SNE (along with SQuad-MDS/t-SNE Hybrid) possesses the best local structure preservation. Nevertheless, there is a high level of complementarity between these tools, so the choice of method should depend on the underlying data structure and the analytical needs. \u201c</p> <p>Wang et al, 2023</p>"},{"location":"flowCyt/links/#orchestrating-single-cell-analysis-with-bioconductor","title":"Orchestrating single-cell analysis with Bioconductor","text":"<p>Code mostly developed for single-cell RNA seq analysis, but some of the concepts explained apply to flow cytometry data analysis also, such as the singleCellExperiment object described in Chapter 4.</p> <p>OSCA book</p>"},{"location":"flowCyt/links/#r-for-data-science-book","title":"R for Data Science Book","text":"<p>Book (2nd edition) by Hadley Wickham (a very active R developer), Mine \u00c7etinkaya-Rundel and Garrett Grolemund. The book makes heavy use of the tidyverse, which is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ggplot2 is part of the tidyverse packages.</p> <p>https://r4ds.hadley.nz/</p>"},{"location":"flowCyt/links/#ggplot2-tutorial","title":"ggplot2 tutorial","text":"<p>https://ggplot2.tidyverse.org/</p>"},{"location":"flowCyt/links/#r-charts","title":"R-charts","text":"<p>A site that has been created to be a reference for learning how to create charts in R as well as a place to look for inspiration. Code examples to create plots with base R, ggplot2. Color charts with R color name vs HEX equivalent.</p> <p>https://r-charts.com/</p>"},{"location":"flowCyt/links/#r-markdown","title":"R Markdown","text":"<p>A useful resource is RStudio\u2019s R Markdown tutorial.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p>"},{"location":"flowCyt/links/#cheatsheets","title":"Cheatsheets","text":"<p>Several cheatsheets available for different packages, eg R Markdown, ggplot2, RStudio,\u2026</p>"},{"location":"flowCyt/material/","title":"Material","text":""},{"location":"flowCyt/material/#slides-of-lectures","title":"Slides of lectures","text":""},{"location":"flowCyt/material/#day-1","title":"Day 1","text":"<p>Download slides</p>"},{"location":"flowCyt/material/#day-2","title":"Day 2","text":"<p>Download slides</p>"},{"location":"flowCyt/material/#data-for-exercises","title":"Data for exercises","text":"<p>Please note that the data size is very big: 2.3GB. It may take a while to download.</p> <p>Find the link here. </p>"},{"location":"flowCyt/precourse/","title":"Precourse preparations","text":""},{"location":"flowCyt/precourse/#r-and-rstudio","title":"R and RStudio","text":""},{"location":"flowCyt/precourse/#previous-knowledge-competencies","title":"Previous knowledge / Competencies","text":"<p>We expect participants to have previous knowledge in:</p> <ul> <li>R beginner level (Rstudio, install a library, data frame manipulation, import data from csv file). An introduction to R is available here.</li> </ul>"},{"location":"flowCyt/precourse/#technical","title":"Technical","text":"<p>This course will be streamed, you are thus required to have your own computer with an internet connection, and with latest the version of R and the free version of RStudio installed. Admin rights may be needed to install the necessary packages.</p> <p>The packages we will need are hosted on CRAN, Bioconductor and Github. You can install the necessary packages using:</p> <pre><code>#################################\n# Non-CRAN package installation #\n#################################\n\ninstall.packages(\"devtools\")\ninstall.packages(\"BiocManager\")\n\n\n###############\n# R markdown  #\n###############\n\ninstall.packages(\"knitr\")\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"pander\")\n\n\n#####################\n# Excel files       #\n#####################\n\ninstall.packages(\"readxl\")\ninstall.packages(\"xlsx\")\ninstall.packages(\"WriteXLS\")\n\n\n#################\n# Visualization #\n#################\n\ninstall.packages(\"ggplot2\")\nBiocManager::install(\"ggcyto\")\ninstall.packages(\"manipulate\")\ninstall.packages(\"ggrepel\")\ninstall.packages(\"ggpubr\")\ninstall.packages(\"RColorBrewer\")\ninstall.packages(\"gridExtra\")\ninstall.packages(\"cowplot\")\ninstall.packages(\"ggsignif\")\nBiocManager::install(\"plotly\")\ninstall.packages(\"ggridges\")\ninstall.packages(\"scales\")\nBiocManager::install(\"ComplexHeatmap\")\ninstall.packages(\"circlize\")\n\n\n#################\n# Data handling #\n#################\n\ninstall.packages(\"reshape2\")\ninstall.packages(\"matrixStats\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"tibble\")\n\n\n###############################################\n# Statistical functions                       #\n###############################################\n\ninstall.packages(\"lme4\")\ninstall.packages(\"multcomp\")\ninstall.packages(\"rstatix\")\ninstall.packages(\"DescTools\")\ninstall.packages(\"statmod\")\nBiocManager::install(\"edgeR\")\ninstall.packages(\"MASS\")\nBiocManager::install(\"diffcyt\")\ninstall.packages('sfsmisc')\ninstall.packages(\"rms\")\n\n\n#########################################\n# Libraries for flow cytometry analysis #\n#########################################\n\nBiocManager::install(\"flowCore\")\nBiocManager::install(\"flowWorkspace\")\nBiocManager::install(\"flowDensity\")\nBiocManager::install(\"MetaCyto\")\nBiocManager::install(\"scDataviz\")\nBiocManager::install(\"flowViz\")\nBiocManager::install(\"flowVS\")\nBiocManager::install(\"flowAI\")\nBiocManager::install(\"PeacoQC\")\nBiocManager::install(\"flowClean\")\nBiocManager::install(\"CATALYST\")\ndevtools::install_github('saeyslab/CytoNorm')\nBiocManager::install(\"SingleCellExperiment\")\ninstall.packages(\"uwot\")\nBiocManager::install(\"FlowSOM\")\nBiocManager::install(\"ConsensusClusterPlus\")\ninstall.packages(\"Rtsne\")\nBiocManager::install(\"scater\")\ndevtools::install_github(\"RGLab/scamp\")\ndevtools::install_github(\"RGLab/FAUST\")\n\n\n############################\n# Survival analysis        #\n############################\n\ninstall.packages(\"survival\")\ninstall.packages(\"survminer\")\n</code></pre> <p>After installation, packages can be loaded using:</p> <pre><code>#################################\n# Non-CRAN package installation #\n#################################\n\n# install packages\nlibrary(devtools) # install.packages(\"devtools\")\nlibrary(BiocManager) # install.packages(\"BiocManager\")\n\n\n###############\n# R markdown  #\n###############\n\nlibrary(knitr) # install.packages(\"knitr\")\nlibrary(rmarkdown) # install.packages(\"rmarkdown\")\nlibrary(pander) # install.packages(\"pander\")\n\n\n#####################\n# Excel files       #\n#####################\n\nlibrary(readxl) # install.packages(\"readxl\")\nlibrary(xlsx) # install.packages(\"xlsx\")\nlibrary(WriteXLS) # install.packages(\"WriteXLS\")\n\n\n#################\n# Visualization #\n#################\n\nlibrary(ggplot2) # install.packages(\"ggplot2\")\nlibrary(ggcyto) # BiocManager::install(\"ggcyto\")\nlibrary(manipulate) # install.packages(\"manipulate\")\nlibrary(ggrepel) # install.packages(\"ggrepel\")\nlibrary(ggpubr) # install.packages(\"ggpubr\")\nlibrary(RColorBrewer) # install.packages(\"RColorBrewer\")\nlibrary(gridExtra) # install.packages(\"gridExtra\")\nlibrary(cowplot) # install.packages(\"cowplot\")\nlibrary(ggsignif) # install.packages(\"ggsignif\")\nlibrary(plotly) # BiocManager::install(\"plotly\")\nlibrary(ggridges) # install.packages(\"ggridges\")\nlibrary(scales) # install.packages(\"scales\")\nlibrary(ComplexHeatmap) # BiocManager::install(\"ComplexHeatmap\")\nlibrary(circlize) # install.packages(\"circlize\")\n\n\n#################\n# Data handling #\n#################\n\nlibrary(reshape2) # install.packages(\"reshape2\")\nlibrary(matrixStats) # install.packages(\"matrixStats\")\nlibrary(tidyverse) # install.packages(\"tidyverse\")\nlibrary(dplyr) # install.packages(\"dplyr\")\nlibrary(tibble) # install.packages(\"tibble\")\n\n\n###############################################\n# Statistical functions                       #\n###############################################\n\nlibrary(lme4) # install.packages(\"lme4\")\nlibrary(multcomp) # install.packages(\"multcomp\")\nlibrary(rstatix) # install.packages(\"rstatix\")\nlibrary(DescTools) # install.packages(\"DescTools\")\nlibrary(statmod) # install.packages(\"statmod\")\nlibrary(edgeR) # BiocManager::install(\"edgeR\")\nlibrary(MASS) # install.packages(\"MASS\")\nlibrary(diffcyt) # BiocManager::install(\"diffcyt\")\nlibrary(sfsmisc) # install.packages('sfsmisc')\nlibrary(rms) # install.packages(\"rms\")\n\n#########################################\n# Libraries for flow cytometry analysis #\n#########################################\n\nlibrary(flowCore) # BiocManager::install(\"flowCore\")\nlibrary(flowWorkspace) # BiocManager::install(\"flowWorkspace\")\nlibrary(flowDensity) # BiocManager::install(\"flowDensity\")\nlibrary(MetaCyto) # BiocManager::install(\"MetaCyto\")\nlibrary(scDataviz) # BiocManager::install(\"scDataviz\")\nlibrary(flowViz) # BiocManager::install(\"flowViz\")\nlibrary(flowVS) # BiocManager::install(\"flowVS\")\nlibrary(flowAI) # BiocManager::install(\"flowAI\")\nlibrary(PeacoQC) # BiocManager::install(\"PeacoQC\")\nlibrary(\"flowClean\") # BiocManager::install(\"flowClean\")\nlibrary(CATALYST) # BiocManager::install(\"CATALYST\")\nlibrary(CytoNorm) # install_github('saeyslab/CytoNorm')\nlibrary(SingleCellExperiment) # BiocManager::install(\"SingleCellExperiment\")\nlibrary(uwot)  # install.packages(\"uwot\")\nlibrary(FlowSOM) # BiocManager::install(\"FlowSOM\")\nlibrary(ConsensusClusterPlus) # BiocManager::install(\"ConsensusClusterPlus\")\nlibrary(Rtsne) # install.packages(\"Rtsne\")\nlibrary(scater) # BiocManager::install(\"scater\")\nlibrary(scamp) # devtools::install_github(\"RGLab/scamp\")\nlibrary(faust) # devtools::install_github(\"RGLab/FAUST\")\n\n\n############################\n# Survival analysis        #\n############################\n\nlibrary(survival) # install.packages(\"survival\")\nlibrary(survminer) # install.packages(\"survminer\")\n</code></pre>"},{"location":"flowCyt/day1/exercises_d1/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"flowCyt/day1/exercises_d1/#starting-to-work-with-flow-cytometry-data-in-r-packages","title":"Starting to work with flow cytometry data in R - packages","text":"<p>One package that provides data structures and basic functions to deal with flow cytometry data is flowCore. flowCore allows to import data contained within a FCS file and store it in a flowFrame object. Data combined from several FCS files are imported and stored in a flowSet object. </p> <p>Packages that provide functions for automatic quality control are flowAI and PeacoQC. </p> <p>For visualization, the package ggcyto provides plotting functions as an interface to ggplot2 plots using flowFrame or flowSet objects. One example is the autoplot() function.</p> <p>Another package available for visualization is flowViz, which includes the densityplot() function.</p>"},{"location":"flowCyt/day1/exercises_d1/#lets-practice-1","title":"Let\u2019s practice - 1","text":"<p>In this exercise we will use a 36-color spectral flow cytometry dataset from a study performed in the context of Covid-19 research. Only a subset from 5 healthy donors will be used. For each healthy donors, there are three time points, as indicated in the FCS file names. Data was downloaded through the Flow Repository database (FR-FCM-Z3WR). FCS files were pre-gated on live CD3+CD19- T cells in FlowJo.</p> <p>Create a new script in which you will:</p> <p>1) Import the FCS files (within course_datasets/FR_FCM_Z3WR/) into a flowSet. Do not transform or truncate the values.</p> <p>2) Create a data frame with the list of channels and corresponding antigens, and view it. Hint: get the antigens from the parameters of one of the flowFrame in the set</p> <p>3) Add a new column to the phenotypic data with the time point of the sample. View the phenotypic data</p> <p>4) Convert the channel names in the expression matrices to the corresponding antigen names (where applicable).</p> <p>5) Create a bivariate density plot showing \u00abFSC-H\u00bb againts \u00abHLA-DR\u00bb for all samples from day 0. Apply a flowJo inverse hyperbolic sine scale to the y axis (\u00abHLA-DR\u00bb)</p> Answer <pre><code># load libraries\nlibrary(flowCore)\nlibrary(ggcyto)\n\n# 1) Import the FCS files (course_datasets/FR_FCM_Z3WR/). \n# Do not transform or truncate the values. \n\n# path to the directory (folder) with the fcs files\nfcs.dir&lt;- file.path(\"course_datasets/FR_FCM_Z3WR/\")\n\n# read fcs files into a flowSet\nfcs_data &lt;- flowCore::read.flowSet(path = fcs.dir, \n                     pattern = \"*.fcs\", \n                     transformation = FALSE, truncate_max_range = FALSE) \n# Explore the object:\nfcs_data\n\nsummary(fcs_data[[1]])\n\n#2) Create a data frame with the list of channels and corresponding antigens, and show it.\n#Hint: get the antigens from the parameters of one of the flowFrame in the set\nchannels &lt;- colnames(fcs_data)\nantigen &lt;- pData(parameters(fcs_data[[1]]))$desc\npanel &lt;- data.frame(channels = channels, antigen= antigen)\n\n# show the panel\npanel\n\n# write panel to csv file\nwrite.csv(panel,file = \"course_datasets/FR_FCM_Z3WR/panel.csv\", quote = FALSE, row.names =     FALSE)\n\n#3) Add a new column to the phenotypic data with the time point of the sample\n\n# check sample names\nsampleNames(fcs_data)\n# [1] \"0E1F8E_0.fcs\"  \"0E1F8E_14.fcs\" \"0E1F8E_7.fcs\"  \"180E1A_0.fcs\"  \"180E1A_14.fcs\"         \"180E1A_7.fcs\" \n# [7] \"1A9B20_0.fcs\"  \"1A9B20_14.fcs\" \"1A9B20_7.fcs\"  \"61BBAD_0.fcs\"  \"61BBAD_14.fcs\"         \"61BBAD_7.fcs\" \n# [13] \"61BBAD_0.fcs\"  \"61BBAD_14.fcs\" \"61BBAD_7.fcs\"\n# add column with time point\npData(fcs_data)$time_point &lt;- rep(c(\"D0\",\"D14\",\"D7\"),5)\n\n# show the phenotypic data\npData(fcs_data)\n\n# save flowSet for next exercise\nsave(fcs_data,file=\"course_datasets/FR_FCM_Z3WR/fcs_data.RData\")\n\n#4) Convert the channel names in the expression matrices to the corresponding \n# antigen names (where applicable)\ncolnames(fcs_data)[!is.na(antigen)] &lt;- antigen[!is.na(antigen)] \n\n# check that the antigen name change was effective:\nhead(exprs(fcs_data[[1]])[,c(5:10)])\n\n# 5) Create a bivariate density plot showing \"FSC-H\" against \"HLA-DR\" for all samples from day 0. \n# Apply a flowJO inverse hyperbolic sine scale to the y axis (\"HLA-DR\")\n\n# split by time point \nfcs_data.split &lt;- split(fcs_data, pData(fcs_data)$time_point)\nclass(fcs_data.split) # list\nclass(fcs_data.split$D0) # flowSet\n\n# create the bivariate density plot\nggcyto::autoplot(fcs_data.split$D0, x=\"FSC-H\",y=\"HLA-DR\", bins = 64) + \n   ggcyto::scale_x_flowjo_biexp() + \n   ggcyto::scale_y_flowjo_fasinh()\n\n# FSC-H = forward scatter height\n# FSC-A = forward  scatter area\n# SSC-H = side scatter height\n# SSC-A = side scatter area\n</code></pre>"},{"location":"flowCyt/day1/exercises_d1/#lets-practice-2","title":"Let\u2019s practice - 2","text":"<p>We will use the flowSet created in the previous exercise, and transform the data using two sets of cofactors: fixed and estimated using a function from the flowVS package.</p> <p>Create a new script in which you will:</p> <p>1) Load the flowSet object saved at the end of the previous exercise.</p> <p>2) Read the \u00abcourse_datasets/FR_FCM_Z3WR/panel.csv\u00bb file into a data frame. The last column contains the marker classes (\u00abnone\u00bb, \u00abtype\u00bb or \u00abstate\u00bb).</p> <p>3) Downsample the flowSet to 2\u2019000 cells per flowFrame (you can find the downsampling function in the \u00abcourse_datasets/function_for_downsampling_flowSets.R\u00bb file).</p> <p>4) Transform the \u00abtype\u00bb and \u00abstate\u00bb markers using  both Logicle (hints: use the downsampled flowSet for parameter estimation; start with default parameters, and adjust if needed) and arcsinh transformations (fixed cofactors of 3000).</p> <p>5) Compare the transformation in the first flowFrame using density plots.</p> Answer <pre><code># load the libraries\nlibrary(flowCore)\nlibrary(flowVS)\nlibrary(flowViz)\n\n# 1) load the flowSet object from previous exercise\nload(\"course_datasets/FR_FCM_Z3WR/fcs_data.RData\")\n\n# 2) Add marker_class to panel\n# load panel from previous exercise\npanel &lt;- read.csv(\"course_datasets/FR_FCM_Z3WR/panel.csv\")\n\n# Set the marker classes\npanel$marker_class &lt;- rep(\"none\", nrow(panel))\npanel$marker_class[c(7:10,11:15,17:18,20,21,23:29,31:36,38,41,42)] &lt;- \"state\"\npanel$marker_class[c(16,19,22,37,39,40)] &lt;- \"type\"\npanel$marker_class &lt;- factor(panel$marker_class,levels = c(\"type\",\"state\",\"none\"))\n\n# write new panel to csv file\nwrite.csv(panel,file = \"course_datasets/FR_FCM_Z3WR/panel_with_marker_classes.csv\", quote = FALSE, row.names = FALSE)\n\n# View the panel\npanel\n\n#3) Downsample the flowSet to 2'000 cells per flowFrame for parameter estimation\n\n# load the function for downsampling a flowset\nsource(\"course_datasets/function_for_downsampling_flowSets.R\")\n\n# downsample to 2000 cells\nfcs_data_small &lt;- Downsampling_flowSet(x = fcs_data, samplesize = 2000)\n\n#4) Transform using Logicle and Arcsinh transformation (fixed cofactors)\n\n# select markers to be transformed\nmarkerstotransform &lt;- panel$channels[panel$marker_class!=\"none\"]\n\n# transform with Logicle\nfcs_list &lt;- list()\nfor(i in 1:length(fcs_data)){\n\n  algcl &lt;- estimateLogicle(fcs_data_small[[i]],\n                       channels = markerstotransform, m=6, t=4E6)\n\n  fcs_list[[i]] &lt;- transform(fcs_data[[i]], algcl)\n\n}\n\nfcs_transform_logicle &lt;- as(fcs_list, \"flowSet\")\nsampleNames(fcs_transform_logicle) &lt;- sampleNames(fcs_data)\npData(fcs_transform_logicle) &lt;- pData(fcs_data)\n\n# transform with fixed cofactors\nfcs_transform_arcsinh &lt;- transFlowVS(fcs_data, \n                                 channels = markerstotransform, \n                                 rep(3000, length(markerstotransform)))\n\nsampleNames(fcs_transform_arcsinh) &lt;- sampleNames(fcs_data)\npData(fcs_transform_arcsinh) &lt;- pData(fcs_data)\n\n# 5) Density plots \ndensityplot( ~ ., fcs_transform_logicle[[1]]) # worst\ndensityplot( ~ ., fcs_transform_arcsinh[[1]]) # worst\n\n# save\nsave(fcs_transform_logicle, markerstotransform,file = \"course_datasets/FR_FCM_Z3WR/fcs_transform_logicle.RData\")\n</code></pre>"},{"location":"flowCyt/day1/exercises_d1/#lets-practice-3","title":"Let\u2019s practice - 3","text":"<p>We will continue with the Logicle transformed flowSet created in the last exercise, and apply the flowAI quality control algorithm to remove low quality cells.</p> <p>Create a new script in which you will:</p> <p>1) Load the flowSet object from exercice 2 (\u00ab/course_datasets/FR_FCM_Z3WR/fcs_transform_logicle.RData\u00bb).</p> <p>2) Run the flowAI quality control algorithm. Set the output directory to \u00abcourse_datasets/FR_FCM_Z3WR/flowAI_res\u00bb.</p> <p>3) Load the \u00abQcmini.txt\u00bb report created by flowAI and view it.</p> <p>4) Check the html report for sample 1A9B20_0. What happened ?</p> Answer <pre><code># load libraries\nlibrary(flowCore)\nlibrary(flowAI)\n\n# 1) load the flowSet object from previous exercise and \nload(\"course_datasets/FR_FCM_Z3WR/fcs_transform_logicle.RData\")\n\n# 2) Run the flowAI quality control algorith. \n# Output the results to a\"course_datasets/FR_FCM_Z3WR/flowAI_res/\"\n\nfcs_clean &lt;- flow_auto_qc(fcs_transform_logicle, \n                      folder_results = \"course_datasets/FR_FCM_Z3WR/flowAI_res/\")\n\n# save clean flowSet\nsave(fcs_clean, file = \"course_datasets/FR_FCM_Z3WR/fcs_clean.RData\")\n\n# 3) Load and view the report created by flowAI\n\n# load\nQCmini &lt;- read.delim(\"course_datasets/FR_FCM_Z3WR/flowAI_res/QCmini.txt\")\n\n# change the names of the columns\nnames(QCmini) &lt;- gsub(\"X..\",\"% \", names(QCmini))\n\n# View\nQCmini\n</code></pre> <p>End of Day 1, good job! </p>"},{"location":"flowCyt/day2/exercises_d2/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"flowCyt/day2/exercises_d2/#dimensionality-reduction-clustering-and-differential-testing-packages","title":"Dimensionality reduction, clustering and differential testing - packages","text":"<p>CATALYST provides functions for preprocessing of cytometry data such as FACS, CyTOF, and IMC, as well as functions for dimensional reduction, clustering and methods for differential composition and expression analysis. The CATALYST package provides a function to first cluster data with FlowSOM clustering and then apply ConsensusClusterPlus metaclustering.</p> <p>CATALYST requires the data be contained within an object of class SingleCellExperiment of Bioconductor.</p> <p>An R implementation of the Uniform Manifold Approximation and Projection (UMAP) method for dimensionality reduction is available in the CRAN package uwot. </p> <p>The diffcyt package provides     statistical methods for differential discovery analyses in high-dimensional cytometry data (including flow cytometry and mass cytometry).</p>"},{"location":"flowCyt/day2/exercises_d2/#lets-practice-4","title":"Let\u2019s practice - 4","text":"<p>n this exercise we will continue with the clean flowSet from the last exercise. We will use the CATALYST package to create a SingleCellExperiment (sce) object,  perform dimensionality reduction (UMAP) and use the UMAP to plot the expression of markers.</p> <p>Create a new script in which you will:</p> <p>1) Load the clean flowSet from last exercise (\u00abfcs_clean.Rdata\u00bb).</p> <p>2) Downsample the flowSet to 2\u2019000 cells per flowFrame (source the file \u00abfunction_for_downsampling_flowSets.R\u00bb)</p> <p>3) Create a sce object from the downsampled flowSet.</p> <p>4) Create a UMAP with default parameters, based on the expression of the \u00abtype\u00bb markers. Show the expression of CD3 by time point.</p> <p>5) Check the effect of changing parameters \u00abmin_dist\u00bb and \u00abn_neighbors\u00bb from the default values.</p> Answer <pre><code># load libraries\nlibrary(flowCore)\nlibrary(CATALYST)\n\n# 1) load the flowSet object from previous exercise\nload(\"course_datasets/FR_FCM_Z3WR/fcs_clean.RData\")\nfcs_clean\n\n# 2) Downsample to 2'000 cells \n\n# source downsampling function\nsource(\"course_datasets/function_for_downsampling_flowSets.R\")\n\n# downsample\nset.seed(1234)\nfcs_small &lt;- Downsampling_flowSet(fcs_clean,samplesize = 2000)\n\n# 3) Create a sce object from the downsampled flowSet\n# We need the panel data frame\npanel &lt;- read.csv(\"course_datasets/FR_FCM_Z3WR/panel_with_marker_classes.csv\")\n\n# We also need a metadata dataframe\nmd &lt;- pData(fcs_small)\n\n# create sce\nsce &lt;- CATALYST::prepData(fcs_small, \n            md = md,\n            md_cols = list(file=\"name\", id = \"name\", factors = \"time_point\"),\n            panel = panel,\n            panel_cols = list(channel = \"channels\", antigen = \"antigen\", class =    \"marker_class\"),\n            transform = FALSE,\n            FACS=TRUE,\n            features = panel$channels[panel$marker_class!=\"none\"])\n# Overview of the object:\nsce\n# change the assay name to \"exprs\" because it was already transformed\nassayNames(sce) &lt;- \"exprs\"\nhead(assays(sce)$exprs[,1:10])\n\n# Phenotypic data\ncolData(sce)\n# Channel parameters\nrowData(sce)\n\n# save\nsave(sce,file = \"course_datasets/FR_FCM_Z3WR/sce.RData\")\n\n# 4) UMAP with default parameters (n_neighbors=15 and min_dist = 0.01)\nset.seed(1601)\nsce &lt;- runDR(sce, \n         assay = \"exprs\", \n         dr = \"UMAP\", \n         features = \"type\", \n         cells = NULL)\n\n# plot\nplotDR(sce,\n   dr =  \"UMAP\",\n   assay = \"exprs\", \n   color_by=\"CD3\", \n   facet_by = \"time_point\" )\n\nreducedDims(sce)\n# List of length 1\n# names(1): UMAP \n\n# save\nsave(sce,file = \"course_datasets/FR_FCM_Z3WR/sce_UMAP.RData\" )\n\n# 4) UMAP with n_neighbors=15 (defaults) and min_dist = 0.5\nset.seed(1601)\nsce &lt;- runDR(sce, \n         assay = \"exprs\", \n         dr = \"UMAP\", \n         features = \"type\", \n         cells = NULL,\n         min_dist = 0.5)\n# the previous UMAP coordinates are overwritten, we still have only 1 reducedDims element:\nreducedDims(sce)\n\n# plot\nplotDR(sce,\n   dr =  \"UMAP\",\n   assay = \"exprs\", \n   color_by=\"CD3\", \n   facet_by = \"time_point\" )\n\n# 4) UMAP with n_neighbors=5 and min_dist = 0.01 (default)\nset.seed(1601)\nsce &lt;- runDR(sce, \n         assay = \"exprs\", \n         dr = \"UMAP\", \n         features = \"type\", \n         cells = NULL,\n         n_neighbors = 5)\n\n# plot\nplotDR(sce,\n   dr =  \"UMAP\",\n   assay = \"exprs\", \n   color_by=\"CD3\", \n   facet_by = \"time_point\" )\n\n\n# 5) UMAP with n_neighbors=2 and min_dist = 0.5\nset.seed(1601)\nsce &lt;- runDR(sce, \n         assay = \"exprs\", \n         dr = \"UMAP\", \n         features = \"type\", \n         cells = NULL,\n         n_neighbors = 2,\n         min_dist = 0.5)\n\n# plot\nplotDR(sce,\n   dr =  \"UMAP\",\n   assay = \"exprs\", \n   color_by=\"CD3\", \n   facet_by = \"time_point\" )\n\n# Try tSNE! It is slower than UMAP\nset.seed(1601)\nsce &lt;- runDR(sce, \n         assay = \"exprs\", \n         dr = \"TSNE\", \n         features = \"type\", \n         cells = NULL)\nreducedDims(sce)\n# List of length 2\n# names(2): UMAP TSNE\n\n# plot\nplotDR(sce,\n   dr =  \"TSNE\",\n   color_by=\"sample_id\",\n   facet_by = \"time_point\")\n</code></pre>"},{"location":"flowCyt/day2/exercises_d2/#lets-practice-5","title":"Let\u2019s practice - 5","text":"<p>In this exercise we will apply the FlowSom method for unsupervised clustering of cells, followed by ConsensusClusterPlus metaclustering. We then check the expression of markers by metacluster. Finally, we will rename / merge the metaclusters to annotate major cell populations.</p> <p>Create a new script in which you will:</p> <p>1) Load the sce object with UMAP from the previous exercise (\u201ccourse_datasets/FR_FCM_Z3WR/sce_UMAP.RData\u201d).</p> <p>2) Apply FlowSOM clustering + ConsensusClusterPlus metaclustering.</p> <p>3) Plot a UMAP showing the location of metaclusters; marker expression heatmap and ridge plots. Use 8 metaclusters.</p> <p>4) Rename / merge metaclusters as major cell populations according to the expression of markers.</p> <p>5) Plot a UMAP showing the major cell populations.</p> Answer <pre><code># load libraries\nlibrary(flowCore)\nlibrary(CATALYST)\n\n# 1) Load the sce object with UMAP from previous exercise\nload(\"course_datasets/FR_FCM_Z3WR/sce_UMAP.RData\")\n\n# 2) Apply FlowSOM clustering + ConsensusClusterPlus metaclustering\n\nset.seed(1234)\nsce &lt;- cluster(sce, \n           features = \"type\")\n\nnames(cluster_codes(sce))\n# [1] \"som100\" \"meta2\"  \"meta3\"  \"meta4\"  \"meta5\"  \"meta6\"  \"meta7\"  \"meta8\"  \"meta9\"  \"meta10\"\n# [11] \"meta11\" \"meta12\" \"meta13\" \"meta14\" \"meta15\" \"meta16\" \"meta17\" \"meta18\" \"meta19\" \"meta20\"\n\n# 3) Plot UMAP with clusters, expression heatmap and ridge plots\n\n# UMAP\nplotDR(sce,\n   dr = \"UMAP\",\n   color_by = \"meta8\" )\n\n# Heatmap \nplotExprHeatmap(sce,row_clust = F, col_clust = F,\n            features = \"type\",\n            by=\"cluster_id\",\n            k=\"meta8\")\n\n# Ridge plots\nplotClusterExprs(sce,\n             k=\"meta10\")\n\n# 4) Rename / merge clusters\n# create a merging table\nmerging_table &lt;- data.frame(old_cluster = 1:8,\n                        new_cluster = c(\"CD4 T cells\",\"Other\",\"Monocytes\",\"Other\",\"CD8 T cells\",\"CD8 T cells\",\"Other\",\"B cells\"))\n\n# write to file\nwrite.csv(merging_table,file = \"course_datasets/FR_FCM_Z3WR/merging_table.csv\",quote = F,row.names = F)\n\n# annotate clusters\nsce &lt;- mergeClusters(sce,\n                 k=\"meta8\",\n                 table = merging_table,\n                 id = \"Major_cell_populations\")\n\n# 5) UMAP with major cell populations\nplotDR(sce,\n   dr = \"UMAP\",\n   color_by = \"Major_cell_populations\")\n\n# save\nsave(sce,file = \"course_datasets/FR_FCM_Z3WR/sce_annotated.RData\" )\n</code></pre>"},{"location":"flowCyt/day2/exercises_d2/#lets-practice-6","title":"Let\u2019s practice - 6","text":"<p>In this exercise we will test if cell populations have significantly different abundances between two time points (D14 compared to D0).</p> <p>Create a new script in which you will:</p> <p>1) Load the sce object from the previous exercise (\u201csce_annotated.RData\u201d).</p> <p>2) Plot relative cell population abundances by sample and time point.</p> <p>3) Set up the design and contrast matrices.</p> <p>4) Test for differences in abundances between D14 and D0.</p> <p>5) View table of results</p> Answer <pre><code># load libraries\nlibrary(CATALYST)\nlibrary(diffcyt)\n\n# 1) Load the sce object with annotation from previous exercise\nload(\"course_datasets/FR_FCM_Z3WR/sce_annotated.RData\")\n\n# 2) Plot relative population abundances by sample, grouped by time point\n\nsce$time_point &lt;- factor(sce$time_point, levels = c(\"D0\",\"D7\",\"D14\"))\n\n# stacked bar plot\nplotAbundances(sce, \n           k = \"Major_cell_populations\", \n                 by = \"sample_id\", \n                 group_by = \"time_point\")\n\n# 3) Set up designand contrast  matrices.\n\n# Set design matrix\ndesign &lt;- createDesignMatrix(ei(sce),\n                         cols_design = c(\"time_point\"))\n\n# check\ndesign\n\n# Set contrast matrix (D14 vs D0)\ncontrast &lt;- createContrast(c(0,0,1))\n\n# 4) Compute differential abundance and show top differentially abundant cell populations\n\n# compute DA\nres_DA &lt;- diffcyt(sce, \n              clustering_to_use = \"Major_cell_populations\",\n            analysis_type = \"DA\", \n            method_DA = \"diffcyt-DA-edgeR\",\n                design = design, \n            contrast = contrast)\n\n# show top differentially abundant cell populations\ntbl_DA &lt;- rowData(res_DA$res)\ntbl_DA\n\ntopTable(res_DA, format_vals = T)\n</code></pre>"},{"location":"flowCyt/day2/exercises_d2/#lets-practice-7","title":"Let\u2019s practice - 7","text":"<p>In this exercise we will test if markers were differentially expressed between two time points (D14 compared to D0).</p> <p>Create a new script in which you will:</p> <p>1) Load the sce object from the previous exercise (\u201csce_annotated.RData\u201d).</p> <p>2) Set up the design and contrast matrices.</p> <p>3) Test for differences in marker expression between D14 and D0.</p> <p>4) View table of results.</p> Answer <pre><code># load libraries\nlibrary(CATALYST)\nlibrary(diffcyt)\n\n# 1) Load the sce object with annotation from previous exercise\nload(\"course_datasets/FR_FCM_Z3WR/sce_annotated.RData\")\n\n# 2) Set up design and contrast matrices (D14 vs D0)\n\ndesign &lt;- createDesignMatrix(ei(sce),\n                         cols_design = c(\"time_point\"))\n\ncontrast &lt;- createContrast(c(0,0,1))\n\n# 3) Compute differential state expression\n\nres_DS &lt;- diffcyt(sce, \n              clustering_to_use = \"Major_cell_populations\",\n            analysis_type = \"DS\", \n            method_DS = \"diffcyt-DS-limma\",\n                design = design, \n            contrast = contrast)\n\n# Are there any differentially expressed markers ?\n\ntopTable(res_DS)\n</code></pre> <p>End of Day 2, good job! </p>"},{"location":"flowCyt/day3/exercises_d3/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"flowCyt/day4/exercises_d4/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"flowCyt/day5/exercises_d5/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"introR/course_schedule/","title":"Course schedule","text":"start end topic 10:30 10:50 Coffee break! 12:00 13:00 Lunch break! 15:30 15:50 Coffee break!"},{"location":"introR/links/","title":"Useful links","text":"<p>Here we provide some additional links</p>"},{"location":"introR/links/#some-tutorials-to-learn-or-practice-r","title":"Some tutorials to learn or practice R","text":"<p>https://support.posit.co/hc/en-us/articles/200552336-Getting-Help-with-R</p> <p>https://r-coder.com/learn-r/</p>"},{"location":"introR/links/#r-for-data-science-book","title":"R for Data Science Book","text":"<p>Book (2nd edition) by Hadley Wickham (a very active R developer), Mine \u00c7etinkaya-Rundel and Garrett Grolemund. The book makes heavy use of the tidyverse, which is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ggplot2 is part of the tidyverse packages.</p> <p>https://r4ds.hadley.nz/</p>"},{"location":"introR/links/#ggplot2-tutorial","title":"ggplot2 tutorial","text":"<p>https://ggplot2.tidyverse.org/</p>"},{"location":"introR/links/#r-charts","title":"R-charts","text":"<p>A site that has been created to be a reference for learning how to create charts in R as well as a place to look for inspiration. Code examples to create plots with base R, ggplot2. Color charts with R color name vs HEX equivalent.</p> <p>https://r-charts.com/</p>"},{"location":"introR/links/#r-markdown","title":"R Markdown","text":"<p>A useful resource is RStudio\u2019s R Markdown tutorial.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p>"},{"location":"introR/links/#cheatsheets","title":"Cheatsheets","text":"<p>Several cheatsheets available for different packages, eg R Markdown, ggplot2, RStudio,\u2026</p>"},{"location":"introR/material/","title":"Material","text":""},{"location":"introR/material/#slides-of-lectures","title":"Slides of lectures","text":""},{"location":"introR/material/#day-1","title":"Day 1","text":"<p>Download slides - morning</p> <p>Download slides - afternoon</p>"},{"location":"introR/material/#day-2","title":"Day 2","text":"<p>Download slides - morning</p> <p>Download essential slides - afternoon</p> <p>Download slides - afternoon</p>"},{"location":"introR/material/#data-for-exercises","title":"Data for exercises","text":""},{"location":"introR/material/#data-for-exercises-of-day-1-only","title":"Data for exercises of day 1 only","text":"<p>Download course_datasets</p>"},{"location":"introR/material/#data-for-all-exercises-including-day-2-800-mb-data-size","title":"Data for all exercises, including day 2 (800 Mb data size)","text":"<p>Download from the drive here, using Pwd 54321</p>"},{"location":"introR/precourse/","title":"Precourse preparations","text":""},{"location":"introR/precourse/#r-and-rstudio","title":"R and RStudio","text":""},{"location":"introR/precourse/#technical","title":"Technical","text":"<p>This course will be streamed via Zoom, you are thus required to have your own computer with an internet connection. Please, install the latest the version of R, followed by the installation of the free version of RStudio.</p> <p>At some point during the course, we will install R packages from within RStudio. This requires RStudio to access online repositories of packages and download them from the internet. Please ensure that this will not be blocked by firewalls.</p>"},{"location":"introR/day1/exercises_d1/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"introR/day1/exercises_d1/#first-exploration-of-r-using-rstudio","title":"First exploration of R using RStudio","text":"<p>Four windows are displayed by default within RStudio. One of the windows corresponds to the R console.</p> <p>Type the following commands within the console (bottom left window in RStudio) at the prompt (\u201c&gt;\u201d), followed by the \u201cEnter\u201d key after each one to view the output printed on the console.</p> <p><pre><code>1 + 1\n</code></pre> The first command (1 + 1) prints \u201c2\u201d in the console.  <pre><code>x   &lt;- 128.5\n</code></pre> The second command does not print anything in the console, but a new variable called \u201cx\u201d and that contains the value 128.5 is created and listed in the Workspace (top right window in RStudio). <pre><code>x\n</code></pre> The third command prints the value stored within the \u201cx\u201d variable in the console. <pre><code>abs(-11)\n</code></pre> The fourth command, with the use of the abs() function, prints the absolute value of -11 in the console. <pre><code>?p.adjust\n</code></pre> Finally, the fifth command opens the help page for the p.adjust function (bottom right \u201cHelp\u201d window in RStudio).</p>"},{"location":"introR/day1/exercises_d1/#working-directory","title":"Working directory","text":"<p>To manipulate data within R, we first need to import it. R needs a way to locate the files within the hard drive or system. Therefore, we can specify the working directory, i.e. the location where R will look for files.</p> <p>Warning</p> <p>To run the code below with setwd() make sure you put within the quotes a path that exists within your system.</p> <pre><code># To see what is the current working directory, use the function:\ngetwd()\n# [1] \"C:/Users/twyss/Documents/Rcourse\"\n\n# To change the working directory to any existing folder on your hard drive or system, use setwd() and the file path within quotes, e.g.\nsetwd(\"D:/R_exercises/\")\n</code></pre>"},{"location":"introR/day1/exercises_d1/#workspace-environment-and-history","title":"Workspace - Environment and history","text":"<p>Once a value has been assigned to a named variable, as we did assigning 128.5 to x above, the variable is saved and listed within the Workspace, which is displayed in one of the RStudio windows. </p> <p>Explore your workspace using the command line:</p> <pre><code># To list the objects or variables that are in your workspace, type\nls()\n# To remove (delete) an object from the workspace, use function rm():\nrm(x)\n# To remove (delete) all objects from the workspace, type\nrm(list=ls())\n</code></pre>"},{"location":"introR/day1/exercises_d1/#lets-practice-2-create-a-script","title":"Let\u2019s practice 2 - Create a script","text":"<p>R scripts allow you to save all code for further use or reference. For big projects, it is essential to create an R script. To create a script, go to File &gt; New File &gt; R Script. Save it with file name \u201cex1.R\u201d or any other that is suitable for you. Add a comment symbol (#, the pound or hash sign) at the beginning of the first line.</p> <p>Type or paste the following code. Look at the script (before running it).</p> <p>Can you understand each line? What do you expect it to print to the console? Next, run the script and explore RStudio features such as the Workspace (Environment). Run the script line by line. Try both the \u201cRun\u201d button and the keyboard shortcut.  Watch variables appear in the Environment window (top right). Watch what is printed to the console (bottom left window). Does it match your expectation?</p> <pre><code># First Steps and commands, ex. 1  \nw &lt;- 3\nh &lt;- 0.5\narea &lt;- w * h \narea\n</code></pre>"},{"location":"introR/day1/exercises_d1/#packages","title":"Packages","text":"<p>When R is installed for the first time, a set of \u201cbase\u201d packages is installed along the R software. The list of available packages can be viewed in the package Explorer window within RStudio (bottom right \u201cPackages\u201d window). Each package is a bundle of functions designed and created by an author to perform specific, usually related tasks. When working with \u201cnon-standard\u201d data types, eg in bioinformatics or flow cytometry analysis, packages with bioinformatics-related functions need to be installed by the user. </p> <p>Common repositories for packages are CRAN and Bioconductor.</p> <p>Install packages from CRAN with the install.packages() function.</p> <p>To install packages hosted on Bioconductor, we need 2 steps. First, we install a package called BiocManager, that will allow us to have access to the install() function to download Bioconductor packages.</p> <pre><code># Install packages hosted on CRAN: use a function from the utils package:\ninstall.packages(\"stringi\") # stringi is a package for character string manipulations\n\ninstall.packages(\"rmarkdown\") # rmarkdown package that allows to create pdf reports (see day 2)\n\n# Install packages hosted on bioconductor: first install the BiocManager package that is available on CRAN:\ninstall.packages(\"BiocManager\")\n\n# Then use the install() function from the BiocManager package\n# !! This takes time to complete, run it during coffee or lunch break!\n# Install flowCore:\nBiocManager::install(\"flowCore\")\n\n# Install ggcyto:\nBiocManager::install(\"ggcyto\")\n</code></pre> <p>Once a package is installed, its content and functions need to be made accessible to R. library() loads the package for the current session. It is good practice to load all needed packages at the top of a script.</p> <pre><code># My Script\n\nlibrary(limma)  \nlibrary(DESeq2)  \nlibrary(MASS)  \nlibrary(ggplot2)\n\n# Here my data analysis begins\n</code></pre> <p>If you run the above code, what is the output on the Console? What does it mean?</p> Answer <p>Packages such as limma or DESeq2 are not installed as base packages. They are hosted on Bioconductor and provide functions for RNAseq or microarray data analysis. The error message indicates that these packages were not installed and need to be installed before being able to load them.</p>"},{"location":"introR/day1/exercises_d1/#r-version-and-session-information","title":"R version and session information","text":"<p>R is constantly upgraded by developers, which release a new version of R about every 6 months. Along with R upgrades, packages also get upgrades. From one version to the other of a package, it may happen that the default parameters of functions change. Therefore, it is important to always have in mind which current version of R and packages have been used for any analysis. Print the current R version and versions of attached or loaded packages using:</p> <pre><code># Prints the currently used R version\nR.version.string    \n\n# Print version information about R and all attached or loaded packages\nsessionInfo() \n\n# Print the version of a specific package:\npackageVersion(\"stringi\")\n</code></pre>"},{"location":"introR/day1/exercises_d1/#lets-practice-3","title":"Let\u2019s practice - 3","text":"<p>1) Assign the values 6.7 and 56.3 to variables a and b, respectively.</p> <p>2) Calculate (2a)/b + (ab) and assign the result to variable x. Display the content of x.</p> <p>3) Find out how to compute the square root of variables. Compute the square roots of a and b and of the ratio a/b.</p> <p>4) a) Calculate the logarithm to the base 2 of x (i.e., log2 x).    b) Calculate the natural logarithm of x (i.e., loge x).</p> Answer <pre><code># 1) Assign the values 6.7 and 56.3 to variables \"a\" and \"b\", respectively.\na &lt;- 6.7\nb &lt;- 56.3\n\n# 2) Calculate (2*a)/b + (a*b) and assign the result to variable \"x\". Display the content of \"x\".\nx &lt;- (2*a)/b + a*b\nx\n\n# 3) Find out how to compute the square root of variables. Compute the square roots of \"a\" and \"b\" and of the ratio \"a/b\".\nsqrt(a) #using function sqrt()\nb^0.5 # power 0.5 is the square root\n(a/b)**0.5 # another way of specifying power\n\n# 4) a) Calculate the logarithm to the base 2 of \"x\".\n#   b) Calculate the natural logarithm of \"x\".\nlog2(x) # Function specifically for Log 2. Alternatively: log(x, base=2)\nlog(x)  # If we don't specify the base, default is the natural logarithm. \n</code></pre>"},{"location":"introR/day1/exercises_d1/#lets-practice-4","title":"Let\u2019s practice - 4","text":"<p>1) Create two vectors, vector_a and vector_b, containing values from \u22125 to 5 and from 10 down to 0, respectively.</p> <p>2) Calculate the (element-wise) sum, difference and product between the elements of vector_a and vector_b.</p> <p>3) a) Calculate the sum of elements in vector_a.    b) Calculate the overall sum of elements in both vector_a and vector_b.</p> <p>4) a) Identify the smallest and the largest value in vector_a     b) among both vector_a and vector_b.</p> <p>5) Compute the overall mean of the values among both vector_a and vector_b.</p> <p>Hint: Each task in exercises 1-5 can be performed in a single statement per  vector (the minimum and maximum count as 2 tasks)</p> Answer <pre><code># 1) Create two vectors, \"vector_a\" and \"vector_b\", containing the values from \u22125 to 5 and from 10 down to 0, respectively.\nvector_a &lt;- -5:5\nvector_b &lt;- seq(10,0) # alternatively: vector_b &lt;- c(10,9,8,7,6,5,4,3,2,1,0)\n\n# 2) Calculate the (elementwise) sum, difference and product between the elements of \"vector_a\" and \"vector_b\". \nvector_a + vector_b #sum\nvector_a - vector_b #difference\nvector_a * vector_b #product\n\n# 3) a) Calculate the sum of elements in \"vector_a\"\n#    b) Calculate the overall sum of elements in both  \"vector_a\" and \"vector_b\".\nsum(vector_a)\nsum(vector_a, vector_b) # alternatively : sum(vector_a + vector_b)\n\n# 4) Identify the smallest and the largest value among both \"vector_a\" and \"vector_b\".\nmin(vector_a, vector_b)\nmax(vector_a, vector_b)\n\n# 5) Compute the overall mean of the values among both \"vector_a\" and \"vector_b\"\nmean( c( vector_a, vector_b) ) # mean() works only on a single vector, unlike sum, min and max! \n# Concatenate both vectors (using c() ) before computing the mean\n</code></pre>"},{"location":"introR/day1/exercises_d1/#lets-practice-5","title":"Let\u2019s practice - 5","text":"<p>1) In your script, write the command to load the package \u201cMASS\u201d.</p> <p>2) Write the following command to load the bacteria data set from the package MASS: data(bacteria) # loads the bacteria data set (from MASS)</p> <p>Execute the command. Check: You should have a variable named \u201cbacteria\u201d in your Environment/Workspace.</p> <p>3) What are the names of the columns of the bacteria data.frame ?</p> <p>4) Use [ ] to select rows 100 to 119 of the column \u201cap\u201d .</p> <p>5) Use $ to get the column \u201cweek\u201d and check how many missing values it has.</p> <p>Optional : 6) Count how many rows correspond to a \u201cplacebo\u201d treatment (\u201ctrt\u201d  column) using the comparison operator \u201c==\u201d.</p> Answer <pre><code># 1)Install and load the package MASS (or other CRAN packages).\n# install.packages(\"MASS\")\nlibrary(MASS)\n\n# 2) The following command line loads the bacteria data.frame present in the MASS package. Execute it:\ndata(bacteria)\n?bacteria\n\n# 3) What are the names of the columns of the bacteria data.frame ?\nnames(bacteria)\n\n# 4) Use the [ ] , to select in bacteria rows 100 to 119 in the column \"ap\".\nbacteria[ 100:119 , \"ap\" ]\n\n# 5) Use $ to get the column \"week\" and check how many missing values it has.\nsum(is.na(bacteria$week))\n\n# Optional : 6) use comparison operators to count how many rows correspond to a \u201cplacebo\u201d treatment (\u201ctrt\u201d column).\nsum(bacteria$trt == \"placebo\")\n</code></pre>"},{"location":"introR/day1/exercises_d1/#lets-practice-6","title":"Let\u2019s practice - 6","text":"<p>A clinical dataset from patients with lung cancer is available in the file clinical_data2.csv.</p> <p>The clinical_data2.csv file was generated from the clinical_data.csv source file using the following code:</p> <pre><code>## !! Adapt the path to the path in your own system if you wish to import the data available in file \"clinical_data.csv\"\nclinical_data &lt;- read.csv(\"course_datasets/clinical_data.csv\")\n\n# View the format of the data:\nhead(clinical_data)\n\n# Number of rows and columns:\ndim(clinical_data)\n\n# Column names:\ncolnames(clinical_data)\n\n# Structure of the data:\nstr(clinical_data)\n\n# Convert the gender to a factor and re-order the disease stage:\nclinical_data$gender &lt;- factor(clinical_data$gender)\nclinical_data$stage &lt;- factor(clinical_data$stage, levels = c(\"I\",\"II\",\"III\",\"IV\"))\n\nstr(clinical_data)\n\n# Obtain a summary for each variable:\nsummary(clinical_data)\n\n# View the data in rown number 2:\nclinical_data[2,]\n\n# View the data in column named \"age\":    \nclinical_data[,\"age\"]\n\n# Check the element number 30 of the disease stage column\nclinical_data$stage[30]\n\n# View the data corresponding to patients with stage II disease\nsubset(clinical_data, stage==\"II\")\n\n# View the data corresponding to patients with stage II disease and that are female:\nsubset(clinical_data, stage==\"II\" &amp; gender==\"female\") \n\n# View the data corresponding to patients with stage I or II disease and that are female:\nsubset(clinical_data, (stage==\"I\" | stage==\"II\") &amp; gender==\"female\")\n\ntapply(X=clinical_data$age, INDEX=clinical_data$stage, FUN=min)\n\n# Add a new patient by concatenating rows and assign the result to a new variable called \"clinical_updated\":\nclinical_updated &lt;- rbind(clinical_data,\n                          data.frame(sample_id = \"LC02\", \n                                     collection_date = \"18.02.2021\",\n                                     age=71,\n                                     gender= \"female\",\n                                     stage=\"I\"))\n\n# Create a new treated variable:\ntreated &lt;- rep( c(\"yes\",\"no\"), nrow(clinical_data)/2)\nclinical_mod &lt;- cbind(treated, clinical_data)\n\n# Remove the first column and view the format:\nclinical_orig &lt;- clinical_mod[,-1] \nhead(clinical_orig)\n\nclinical_orig &lt;- clinical_mod[,2:dim(clinical_mod)[2]] \n\n# Export to a new csv file:\nwrite.table(clinical_updated, file=\"course_datasets/clinical_updated.csv\",\n            quote=FALSE, sep=\",\",row.names=FALSE)\n</code></pre> <p>Let\u2019s explore the dataset to see  what it contains. 1) Optional: Open a new script file in R studio, comment it and save it.</p> <p>2) Have a look at the csv file in R studio\u2019s file explorer. What do you need to check in order to be able to read in the file correctly?</p> <p>3) Read the file into R, assign its content to object \u201cclinical_data2\u201d. Examine the object.</p> <p>4) How many observations and variables does the dataset have?</p> <p>5) What is the structure of the dataset? What are the names and classes of the variables?</p> <p>6) Which variables appear to be categorical? Convert them to factors.</p> <p>7) Get the summary statistics of \u201cclinical_data2\u201d</p> Answer <pre><code># A clinical dataset from patients with lung cancer is available in the file clinical_data2.csv. \n# Let's explore the dataset to see  what it contains.\n\n# 1) Open a new script file in R studio, comment it and save it.\n# 2) Have look at the csv file in R studio's file explorer. What do you need to check in order to be able to  read in the file correctly?\n\n# 3) Read the file into R, assign its content to object \"clinical_data2\". Examine the object.\n# Adapt the path to the path in your own system!\nclinical_data2 &lt;- read.csv(\"course_datasets/clinical_data2.csv\")\n\n# 4) How many observations and variables does the dataset have?\ndim(clinical_data2)\n\n# 5) What is the structure of the dataset? What are the names and classes  of the variables?\nstr(clinical_data2)\n\n# 6) Which variables appear to be categorical? Convert them to factors.\n\nclinical_data2$gender &lt;- factor(clinical_data2$gender)\nclinical_data2$stage &lt;- factor(clinical_data2$stage, levels = c(\"I\",\"II\",\"III\",\"IV\"))\nclinical_data2$treatment_status &lt;- factor(clinical_data2$treatment_status)\nclinical_data2$response_to_treatment &lt;- factor(clinical_data2$response_to_treatment,levels = c(\"PD\",\"SD\",\"PR\",\"CR\"))\n\n# 7) Get the summary statistics of \"clinical_data2\"\nsummary(clinical_data2)\n</code></pre>"},{"location":"introR/day1/exercises_d1/#lets-practice-6bis","title":"Let\u2019s practice 6bis","text":"<p>8) Use the function table() to compute the number of samples in  different patient groups. a) How many samples are included of each gender (male, female)? b) How many samples are included per level of response to treatment (PD, SD, PR, CR)? c) Make a 2x2 table gender and level of response to treatment. Hint : try some of the example in the help(table) page.</p> <p>9) Isolate the samples from male patients using subset(). Compute a summary statistics just for the weights of the  subset. Then do the same for the samples from female patients. Export the data of each subgroup to a csv file.</p> <p>10) Compute the means and standard deviations for male and  female patient weights using tapply(). Then do the same by level of response to treatment.</p> Answer <pre><code>  # 8) Use the function table() to compute the number of samples in  different patient groups.\n# Hint : try some of the example in the help(table) page.\n\n# a) How many samples are included of each gender (male, female)? \ntable(clinical_data2$gender)\n\n# b) How many samples are included per level of response to treatment (PD, SD, PR, CR)? \ntable(clinical_data2$response_to_treatment)\n\n# c) Make a 2x2 table gender and level of response to treatment.\ntable(clinical_data2[,c(\"gender\",\"response_to_treatment\")])\n\n# 9) Isolate the samples from male patients using  subset(). \n# Compute a summary statistics just for the weights of the  subset. \n# Then do the same for the samples from female patients. \n# Export the data of each subgroup to a csv file.\n\n# Isolate the samples from male patients\nclinical_data2_male &lt;- subset(clinical_data2, gender==\"male\")\n\n# Compute a summary statistics just for the weights of the  subset\nsummary(clinical_data2_male$weight)\n\n# Export the data to a csv file.\nwrite.table(clinical_data2_male,file = \"course_datasets/clinical_data2_male.csv\",\n      quote=FALSE, \n      sep=\",\",\n      row.names=FALSE)\n\n# Isolate the samples from female patients\nclinical_data2_female &lt;- subset(clinical_data2, gender==\"female\")\n\n# Compute a summary statistics just for the weights of the subset\nsummary(clinical_data2_female$weight)\n\n# Export the data to a csv file.\nwrite.table(clinical_data2_female,file = \"course_datasets/clinical_data2_female.csv\",\n        quote=FALSE, \n        sep=\",\",\n        row.names=FALSE)\n\n# 10) Compute the means and standard deviations for male and female patient weights using tapply(). \n# Then do the same by level of response to treatment.\n\n# by gender\ntapply(clinical_data2$weight, clinical_data2$gender, mean) # mean: by gender\ntapply(clinical_data2$weight, clinical_data2$gender, sd) # standard deviation by gender\n\n# by response to treatment\ntapply(clinical_data2$weight, clinical_data2$response_to_treatment, mean) # mean: by level of response to treatment\ntapply(clinical_data2$weight, clinical_data2$response_to_treatment, sd) # standard deviation by level of response to treatment\n</code></pre> <p>End of Day 1, good job! </p>"},{"location":"introR/day2/exercises_d2/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p> <p>R offers many options for creating graphics and figures. Two common ways to create graphics within R use \u201cbase\u201d functions such as plot(), or functions of the package ggplot2. </p> <p>So many possible chart types exist, and some are better than others at representing different data types. The online tool \u201cFrom Data to Viz\u201d provides a nice decision tree to suggest a set of potentially appropriate graphics to visualize the dataset according to the input data format and type. Feel free to explore the decision tree! Most of the graphics suggested by \u201cData to Viz\u201d are generated with ggplot2 functions and other packages providing extensions for ggplot2 functions. </p> <p>In these exercises, we will create graphics using the \u201cbase\u201d R functions, i.e. functions of the graphics package that is installed at the same time as R is installed.</p>"},{"location":"introR/day2/exercises_d2/#lets-practice-7","title":"Let\u2019s practice 7","text":"<p>Import the clinical data from the file clinical_data_mod.csv. This files contains the same data as clinical_data.csv and in addition, one more column.</p> <p>1) Run str() to check your data frame: did it load correctly?</p> <p>2) Convert gender and response_to_treatment to factor variables.</p> <p>3) Plot a histogram of patient weight and customize it with colours, labels, title.</p> <p>4) Make a scatter plot of height against patient weights using the function plot(). </p> <p>Function arguments:</p> <ul> <li> <p>use solid circles as plotting symbol</p> </li> <li> <p>add a title</p> </li> <li> <p>customize the axis labels (\u201cWeight [kg]\u201d, \u201cHeight [m]\u201d)</p> </li> <li> <p>color the points by gender.</p> </li> </ul> <p>Add a legend for the gender. Fit a trend line using the function abline().</p> <p>5) Create a new column called \u201cBMI\u201d and compute the BMI of patients from their weight and height </p> <p>6) Make boxplots of BMI from patients with different responses to treatment. Customize with title, labels, colors. Add points to the boxplots to show the individual values.</p> <p>7) Optional: Repeat 6 with stage, instead of response to treatment. Hint: what kind of variable is stage?</p> Answer <pre><code>clinical_data &lt;- read.table(\"course_datasets/clinical_data_mod.csv\", header=TRUE, sep=\",\") # define classes for columns\n\nstr(clinical_data)\n\n\n# 2) Convert gender and response_to_treatment to factor variables\n# define the order of factor levels\nclinical_data$gender &lt;- factor(clinical_data$gender)\nclinical_data$response_to_treatment &lt;- factor(clinical_data$response_to_treatment, levels = c(\"PD\",\"SD\",\"PR\",\"CR\"))\n\n# 3) Plot an histogram of patient weight and customize it with colours, labels, title and represent the density line on top.\nhist(clinical_data$weight,\n freq=FALSE, breaks=8,\n main=\"Patient Weight\",\n col=\"orange\" ,\n xlab=\"Weight [kg]\")\n# lines(density(clinical_data$weight), col='blue')\n# Note: freq=FALSE makes the histogram density based, which makes it scale well with the density line\n\n# 4) Make a scatter plot of height against patient weights using the function plot().\n#    Function arguments:\n#     - use solid circles as plotting symbol\n#     - add a title\n#     - customise the axis labels  (\u201cWeight [kg]\u201d, \u201cHeight [m]\u201d)\n#     - colour the points by gender. \n# Add a legend for the gender.\n\nplot(clinical_data$weight,clinical_data$height, \n pch=19,\n main=\"Weight vs Height in Patients\",\n xlab=\"Weight [kg]\", ylab=\"Height [m]\",\n col=c(\"orange\", \"blue\")[clinical_data$gender]\n )\n\nlegend(\"bottomright\",\n   legend=levels(clinical_data$gender),\n   col=c(\"orange\",\"blue\"),\n   pch=19)\n\nabline(lm(clinical_data$height ~ clinical_data$weight),\n   col=\"black\", lwd=1.5)\n\n# 5) Compute the BMI = Weight / Height^2\nclinical_data$BMI &lt;- clinical_data$weight / (clinical_data$height^2)\n\n# 6) Make boxplots of BMIs from patients with different responses to treatment. Customize with title, labels, colors.\nboxplot(BMI ~ response_to_treatment, data= clinical_data,\n    col=c(\"red\", \"orange\",\"green\",\"blue\"),\n    main=\"BMI by level of Response to treatment\",\n    xlab=\"Response to treatment\", ylab=\"BMI\"\n)\npoints(BMI ~ response_to_treatment, data= clinical_data)\n\n# 7) Optional: Repeat 6 with BMI and stage, instead of weight and gender.\nclinical_data$stage &lt;- factor(clinical_data$stage, levels = c(\"I\",\"II\",\"III\",\"IV\"))\nboxplot(BMI ~ stage, data= clinical_data,\n    col=c(\"blue\", \"green\",\"orange\",\"red\"),\n    main=\"Patient BMI by Stage\",\n    xlab=\"Stage\", ylab=\"BMI\"\n)\npoints(BMI ~ stage, data= clinical_data)\n\ngetwd() # check where you are. If you didn't change anything, you will be in the folder with the .Rproj file (rproject root)\n</code></pre>"},{"location":"introR/day2/exercises_d2/#lets-practice-8","title":"Let\u2019s practice 8","text":"<p>1) Create a multi-panel figure with the four graphics (3, 4, 6 and 7 from the previous exercise) on one page, exporting the figure to a pdf file with paper size A4. Set width and height arguments in the call to pdf() to make it look nice.</p> <p>2) Optional: Export the histogram (3 from previous exercise) to a png file. Set the width and height arguments in the call to png() to make it look nice.</p> Answer <pre><code>  # 1) Make a multi-panel figure with the four graphics on one page, exporting the figure to a png file.\n# Set width and height arguments in the call to png() to make it look nice.\n\npdf(\"clinical_data_plots.pdf\", width=7, height=7, paper=\"a4\") \n\n# we want to put 4 plots on the same panel -&gt; 2 rows and 2 columns\npar(mfrow=c(2,2))\n\n# Plot 1\nhist(clinical_data$weight,\n freq=FALSE, breaks=8,\n main=\"Patient Weight\",\n col=\"orange\" ,\n xlab=\"Weight [kg]\")\nlines(density(clinical_data$weight), col='blue')\n\n# Plot 2\nplot(clinical_data$weight,clinical_data$height, \n pch=19,\n main=\"Weight vs Height in Patients\",\n xlab=\"Weight [kg]\", ylab=\"Height [m]\",\n col=c(\"orange\", \"blue\")[clinical_data$gender]\n)\n\nlegend(\"bottomright\",\n   legend=levels(clinical_data$gender),\n   col=c(\"orange\",\"blue\"),\n   pch=19)\n\nabline(lm(clinical_data$height ~ clinical_data$weight),\n   col=\"black\", lwd=1.5)\n\n# Plot 3\nboxplot(BMI ~ response_to_treatment, data= clinical_data,\n    col=c(\"red\", \"orange\",\"green\",\"blue\"),\n    main=\"BMI by level of Response to treatment\",\n    xlab=\"Response to treatment\", ylab=\"BMI\"\n)\npoints(BMI ~ response_to_treatment, data= clinical_data)\n\n\n# Plot 4\nboxplot(BMI ~ stage, data= clinical_data,\n    col=c(\"blue\", \"green\",\"orange\",\"red\"),\n    main=\"Patient BMI by Stage\",\n    xlab=\"Stage\", ylab=\"BMI\"\n)\npoints(BMI ~ stage, data= clinical_data)\n\ndev.off()\n\n# 2) Optional: Export the histogram (3 from previous exercise) to a png file. \n# Set width and height arguments in the call to png() to make it look nice.\n\n# png: width and height are in pixels by default\n\npng(\"hist_weight.png\", width=800, height=600)\nhist(clinical_data$weight,\n freq=FALSE, breaks=8,\n main=\"Patient Weight\",\n col=\"orange\" ,\n xlab=\"Weight [kg]\")\nlines(density(clinical_data$weight), col='blue')\ndev.off()\n</code></pre> <p>Bonus Create plots with ggplot2.</p> <p>ggplot2 is a package that allows you to create graphics by adding customization \u201clayers\u201d one after the other. You first provide the data, tell ggplot2 how to map variables to aesthetics (i.e. the variables you want to have on the x and y coordinates), what plot type to use, and it provides some default colors for the categorical variables, and automatic legend positioning. Everything can then be further customized by the user by adding additional layers using ggplot2 functions.</p> <pre><code>library(ggplot2)\n\n# Import data:\nclinical_data &lt;- read.table(\"course_datasets/clinical_data_mod.csv\", header=TRUE, sep=\",\") # define classes for columns\nstr(clinical_data)\n\n# Convert gender  to factor variables\nclinical_data$gender &lt;- factor(clinical_data$gender)\n\n# Compute the BMI = Weight / Height^2\nclinical_data$BMI &lt;- clinical_data$weight / (clinical_data$height^2)\n\n# Simple boxplot of BMI vs stage\nggplot(data=clinical_data, aes(x=stage, y=BMI)) + \n  geom_boxplot()\n\n# Boxplot of BMI vs stage, coloring according to stage\n# With legend:\nggplot(data=clinical_data, aes(x=stage, y=BMI, color=stage)) + \n  geom_boxplot() \n\n# Boxplot of BMI vs stage, coloring according to stage, flipping orientation\nggplot(data=clinical_data, aes(x=stage, y=BMI, color=stage)) + \n  geom_boxplot() + \n  coord_flip()  \n\n# Without legend:\nggplot(data=clinical_data, aes(x=stage, y=BMI, color=stage)) + \n  geom_boxplot() + \n  theme(legend.position = \"none\")\n\n# Scatter plot of weight vs height, coloring by gender\nggplot(data=clinical_data, aes(x=weight, y=height, color=gender)) +\n  geom_point()\n\n# Compare plot generated earlier with base R to the one with ggplot2:\n# Reproduce Plot 2 of exercise 8\nplot(clinical_data$weight,clinical_data$height, \n     pch=19,\n     main=\"Weight vs Height in Patients\",\n     xlab=\"Weight [kg]\", ylab=\"Height [m]\",\n     col=c(\"orange\", \"blue\")[clinical_data$gender])\nlegend(\"bottomright\",\n       legend=levels(clinical_data$gender),\n       col=c(\"orange\",\"blue\"),\n       pch=19)\nabline(lm(clinical_data$height ~ clinical_data$weight),\n       col=\"black\", lwd=1.5)\n\n# Same plot with ggplot2\n# Scatter plot of weight vs height, coloring by gender\nggplot(data=clinical_data, aes(x=weight, y=height, color=gender)) +\n  geom_point() +\n  scale_color_manual(values=c(\"female\"=\"orange\", \"male\"=\"blue\")) + \n  ggtitle(\"Weight vs Height in Patients\") +\n  xlab(\"Weight [kg]\") + ylab(\"Height [m]\") +\n  theme_bw() +\n  geom_smooth(method = \"lm\",\n              formula = y ~ x,\n              se=TRUE) # display confidence interval around smoothed curve\n\n# Create a separate plot for males and females:\n# Use Facet wrap: separate the plots according to a categorical (factor) variable\nggplot(data=clinical_data, aes(x=weight, y=height, color=gender)) +\n  geom_point() +\n  scale_color_manual(values=c(\"female\"=\"orange\", \"male\"=\"blue\")) + \n  ggtitle(\"Weight vs Height in Patients\") +\n  xlab(\"Weight [kg]\") + ylab(\"Height [m]\") +\n  theme_bw() +\n  geom_smooth(method = \"lm\",\n              formula = y ~ x,\n              se=TRUE) +\n  facet_wrap(~gender)  \n\n\n### Multi panel figures with ggplot2\n# save each plot in an object, create 2 plots that are the same except for the color of the dots\np1 &lt;- ggplot(data=clinical_data, aes(x=weight, y=height, color=gender)) +\n  geom_point() +\n  scale_color_manual(values=c(\"female\"=\"orange\", \"male\"=\"blue\")) + \n  ggtitle(\"Weight vs Height in Patients\") +\n  xlab(\"Weight [kg]\") + ylab(\"Height [m]\") +\n  theme_bw() \n\np2 &lt;- ggplot(data=clinical_data, aes(x=weight, y=height, color=gender)) +\n  geom_point() +\n  scale_color_manual(values=c(\"female\"=\"turquoise\", \"male\"=\"plum\")) + \n  ggtitle(\"Weight vs Height in Patients\") +\n  xlab(\"Weight [kg]\") + ylab(\"Height [m]\") +\n  theme_bw() \n\n# install the cowplot package to arrange several plots on a single page\n# install.packages(\"cowplot\")\nlibrary(cowplot)\nplot_grid(p1, p2, nrow=1)  \n</code></pre>"},{"location":"introR/day2/exercises_d2/#lets-practice-9","title":"Let\u2019s practice 9","text":"<p>In this exercise we will use a 36-color spectral flow cytometry dataset from a study performed in the context of Covid-19 research. Only a subset from 4 healthy donors will be used. For each healthy donor, there are three time points, as indicated in the FCS file names (day 0, day 7, day 14). Data was downloaded through the Flow Repository database, FR-FCM-Z3WR. FCS files were pre-gated on live CD3+CD19-T cells in FlowJo.</p> <p>Create a new script in which you will:</p> <p>1) Import the FCS files (located in course_datasets/FR_FCM_Z3WR/). Do not transform or truncate the values.</p> <p>2) Create a data frame with the list of channels and corresponding antigens, and plot it. Hint: get the antigens from the parameters of one of the flowFrame in the set</p> <p>3) Convert the channel names in the expression matrices to the corresponding antigen names (where applicable)</p> <p>4) Add a new column to the phenotypic data with the time point of the sample. Plot the phenotypic data</p> <p>5) Create a bivariate density plot showing \u00abFSC-H\u00bb againts \u00abHLA-DR\u00bb for all samples from day 0. Apply a flowJo inverse hyperbolic sine scale to the y axis (\u00abHLA-DR\u00bb)</p> Answer <pre><code># load packages\nlibrary(flowCore)\nlibrary(ggcyto)\n\n# 1) Import the FCS files (course_datasets/FR_FCM_Z3WR/). \n# Do not transform or truncate the values. \n\n# path to the directory with the fcs files\nfcs.dir&lt;- file.path( \"course_datasets/FR_FCM_Z3WR/\")\n\n# read fcs files into a flowSet\nfcs_data &lt;- read.flowSet(path=fcs.dir, pattern=\"*.fcs\", transformation = FALSE, truncate_max_range = FALSE) \n\n#2) Create a data frame with the list of channels and corresponding antigens, and plot it.\n#Hint: get the antigens from the parameters of one of the flowFrame in the set\nchannels &lt;- colnames(fcs_data)\nantigen &lt;- pData(parameters(fcs_data[[1]]))$desc\npanel &lt;- data.frame(channels = channels, antigen= antigen)\n\n# View the panel in the console\npanel\n\n#3) Convert the channel names in the expression matrices to the \n# corresponding antigen names (where applicable)\n\ncolnames(fcs_data)[!is.na(antigen)] &lt;- antigen[!is.na(antigen)] \n\n# check\nhead(exprs(fcs_data[[1]])[,c(5:10)])\n\n#4) Add a new column to the phenotypic data with the time point of the sample\n# check sample names\nsampleNames(fcs_data)\n# [1] \"0E1F8E_0.fcs\"  \"0E1F8E_14.fcs\" \"0E1F8E_7.fcs\"  \"180E1A_0.fcs\"  \"180E1A_14.fcs\" \"180E1A_7.fcs\" \n# [7] \"1A9B20_0.fcs\"  \"1A9B20_14.fcs\" \"1A9B20_7.fcs\"  \"61BBAD_0.fcs\"  \"61BBAD_14.fcs\" \"61BBAD_7.fcs\" \n\n# add column with time point\npData(fcs_data)$time_point &lt;- rep(c(\"D0\",\"D14\",\"D7\"),4)\n\n# View the phenotypic data\npData(fcs_data)\n\n# 5) Create a bivariate density plot showing \"FSC-H\" against \"HLA-DR\" for all samples from day 0. \n# Apply a flowJO inverse hyperbolic sine scale to the y axis (\"HLA-DR\")\n\n# split by time point \nfcs_data.split &lt;- split(fcs_data, pData(fcs_data)$time_point)\n\n# create the bivariate density plot\nautoplot(fcs_data.split$D0, x=\"FSC-H\",y=\"HLA-DR\", bins = 64) + \nscale_x_flowjo_biexp() + \nscale_y_flowjo_fasinh()\n</code></pre>"},{"location":"introR/day2/exercises_d2/#lets-practice-r-markdown","title":"Let\u2019s practice - R markdown","text":"<p>If a data analysis project involves many steps and generation of various plots, one of the easy and very practical ways to bundle and organize all steps of analysis together is to use R markdown files to generate PDF or html reports. These reports both display the R code used as well as the output generated, such as graphics, tables, statistical test results, \u2026</p> <p>The difference between an R script and an R markdown file, is that the code is organized within chunks in the R markdown file. In between the chunks, the user can write text that contains information about the analysis.</p> <p>To create an R markdown file, go to File &gt; New File &gt; R markdown. Add a name. This will create a new file that already has some example content. As you can see, the R code is organized in chunks highlighed in grey, with details written as free text in between the chunks.  We can see that the pound sign (#) is used outside of the R code chunks. In this case, the # symbol does not correspond to a comment, but will indicate header levels for the titles and subtitles within your final document obtained after report generation.</p> <p>Once the Rmd is ready, the report can be generated by hitting the \u201cKnit\u201d button at the top of the window. </p> <p>The example Rmd generates the following html report (saved in the same folder as the Rmd file by default), that shows both the code and the resulting output:</p> <p>You can find a short video that introduces some of the principles of R markdown on Youtube, from the beginning up to minute 23:30. Starting at minute 23:30, this video also introduces ggplot2.</p> <p>If you would like to practice creating your own R markdown, modify the one that is generated with the example content when you select File &gt; New File &gt; R Markdown.</p> <p>1) Create a new Rmd file with the following options at the top (in the top YAML instructions within the 2 dash sequences \u201c- - -\u201c)</p> <ul> <li>Title: \u00abLet\u2019s practice\u00bb</li> <li>Author: your name</li> <li>Select the \u00abuse current date when rendering object\u00bb option</li> <li>Default output format: HTML</li> </ul> <p>2) We will repeat exercise 7, but this time by creating a report: Within an R code chunk, import the data from the file clinical_data_mod.csv, convert gender and response to treatment to factors and compute the BMI of patients in a separate code chunk called \u201cprepare_data\u201d. Change the chunk options so that code will not appear in the output.</p> <p>Then, create a new code chunk for each plot. Make sure the plot is centered. Add a header (preceded by the # symbols outside of the code chunks) before each plot with some suggestive plot title.</p> <p>3) Save the Rmd file and produce the html document by \u00abknitting\u00bb it.</p> <p>Download solution Rmd file</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p> <p>Another useful resource is RStudio\u2019s R Markdown tutorial. </p>"},{"location":"introR/day2/exercises_d2/#lets-practice-r-markdown-bis","title":"Let\u2019s practice - R markdown bis","text":"<p>Create an R markdown file and knit to an html report the flow cytometry data analysis performed in Exercise number 9.  Proceed similarly, creating a code chunk where you load the libraries, import and pre-process the data, and create a separate code chunk for every plot.</p> <p>Download solution Rmd file</p>"},{"location":"introR/day2/exercises_d2/#lets-practice-introduction-to-statistics-with-r","title":"Let\u2019s practice - Introduction to statistics with R.","text":"<p>The SIB course \u201cFirst Steps with R in life sciences\u201d provides additional material to perform statistics with R.</p> <p>The slides introducing statistics with R can be found here on the course material github page. </p> <p>The R code to run Wilcoxon or T tests can be found here (ex.9) using source data that can be found here. The R code to run a linear model can be found here (ex.10). Feel free to try it out!</p> <p>End of Day 2, good job! </p>"}]}